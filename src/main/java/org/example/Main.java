package org.example;
import org.example.configuration.SessionFactoryUtil;
import org.example.dao.*;
import org.example.entity.*;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

public class Main {
    public static void main(String[] args) throws IOException {

        /*
        Създаваме компания и и задаваме име, дата на създаване, първоначален капитал,
        след което я записваме в базата данни
        */
        Company company = new Company("Nombo", LocalDate.of(1999, 3, 3), 6000);
        CompanyDao.createCompany(company);

        /*
        Създаваме втора компания и и задаваме име, дата на създаване, първоначален капитал,
        след което я записваме в базата данни
        */
        Company companyTWO = new Company("BovaTV", LocalDate.of(2002,8,18), 1000);
        CompanyDao.createCompany(companyTWO);

        /*
        Създаваме служител и му задаваме име, компания, в която работи,
        квалификация и заплата, след което го записваме в базата данни
        и добавяме заплатата му към разходите на компанията
        */
        Employee employee = new Employee("Ivan", company, EmployeeQual.GOODS, 200);
        EmployeeDao.createEmployee(employee);
        EmployeeDao.addExpenses(employee);

        Employee vtori = new Employee("Anton", company, EmployeeQual.GOODS, 400);
        EmployeeDao.createEmployee(vtori);
        EmployeeDao.addExpenses(vtori);

        /*
        Създаваме клиент с име, компания, която ще използва, и дали е платил сметката си
        и го добавяме в базата данни
        */
        Client client = new Client("Mitko", company, true);
        ClientDao.createClient(client);

        Client clientdve = new Client("Gosho", company, false);
        ClientDao.createClient(clientdve);

        /*
        Създаваме преносим предмет и му задаваме тегло и тип (човек или предмет)
        и го добавяме в базата данни
        ако е човек теглото е 0
        */
        TransferableItem item = new TransferableItem(80, TransferableItemType.GOODS);
        TransferableItemDao.createTransferableItem(item);

        TransferableItem knijki = new TransferableItem(500, TransferableItemType.GOODS);
        TransferableItemDao.createTransferableItem(knijki);

        /*
        Създаваме превоз и му задаваме начална точка, крайна точка, дата на тръгване,
        дата на пристигане, товар, който носи, комапния и работник, който го пренася,
        след което го добавяма в базата данни
        ако работника не притежава съответната квалификация за дадения товар
        програмата ще изведе грешка и няма да създаде превоза
        */
        Trip trip = new Trip("Burgas", "Sofia", LocalDate.of(2024,8,8), LocalDate.of(2024,8,10), item, company, employee, client, clientdve);
        TripDao.createTrip(trip);

        Trip pytuvane = new Trip("Varna", "Tyrnovo", LocalDate.of(2024,2,2), LocalDate.of(2024,2,5), knijki, company, vtori, client, clientdve);
        TripDao.createTrip(pytuvane);

        /*
        Създаваме МПС и го запазваме в базата данни
        ако работникът няма съответната квалификация за дадения тип МПС
        програмата ще изведе грешка и ще спре
        */
        Vehicle vehicle = new Vehicle(VehicleType.TRUCK, employee, company);
        VehicleDao.createVehicle(vehicle);

        /*
        задаваме цената на превоза чрез функцията за пресмятането и
        обновяваме превоза в базата данни
        добавяме цената и към приходите на компанията
        обновяваме приходите на компанията в базата данни
        */
        trip.setCost(TripDao.calculateCost(trip));
        TripDao.updateTrip(trip);
        TripDao.addRevenueToCompany(trip);
        company.setRevenue();
        CompanyDao.updateCompany(company);

        pytuvane.setCost(TripDao.calculateCost(pytuvane));
        TripDao.updateTrip(pytuvane);
        TripDao.addRevenueToCompany(pytuvane);
        company.setRevenue();
        CompanyDao.updateCompany(company);

        /*
        извеждаме списък на приходите на всеки шофьор на дадена компания
        */
        System.out.println("\n");
        List<Object[]> driverIncomesList = CompanyDao.getDriverIncomes(company);
        System.out.println("Income generated by each employee:");
        for (Object[] result : driverIncomesList) {
            System.out.println("Employee: " + result[0] + ", Income: " + result[1]);
        }

        /*
        извеждаме списък на всички шофьори в компанията и
        броя на техните превози
        */
        System.out.println("\n");
        List<Object[]> driverTripsCountList = CompanyDao.getDriverTripsCount(company);
        System.out.println("Employees and number of trips: ");
        for (Object[] result : driverTripsCountList) {
            System.out.println("Employee: " + result[0] + ", number of trips: " + result[1]);
        }


        /*
        извеждаме приходите на на дадена компания за даден период
        */
        System.out.println("\n");
        LocalDate startDate = LocalDate.of(2024, 2, 1);
        LocalDate endDate = LocalDate.of(2024, 8, 10);
        double companyIncomeForPeriod = CompanyDao.getCompanyIncomeForPeriod(company, startDate, endDate);
        System.out.println("Income between " + startDate + " and " + endDate + ": " + companyIncomeForPeriod);

        System.out.println("\n");
        //показваме всички превози на дадена компания
        System.out.println("All trips of company: ");
        System.out.println(CompanyDao.getTotalTripsCount(company));

        /*
        показваме списък на всички работници в дадена компания
        подредени по заплатата им
        */
        System.out.println("\n");
        System.out.println("Employees sorted by salary");
        List<Employee> sortedEmployees = CompanyDao.getEmployeesSortedBySalary(company);

        for (Employee employee1 : sortedEmployees) {
            System.out.println(employee1);
        }

        /*
        показваме списък на всички превози
        подредени по дестинацията им
        */
        System.out.println("\n");
        System.out.println("Trips ordered by End Point");
        List<Trip> trips = TripDao.getTripsOrderedByEndPoint();
        for (Trip trip1 : trips) {
            System.out.println(trip1);
        }

        //записваме данните на превоза във файл
        TripDao.write(trip);

        System.out.println("\n");
        System.out.println("File containing trip info: ");
        //прочитаме файла, съдържащ даннните на превоза
        TripDao.read();

        System.out.println("\n");
        System.out.println("Companies ordered by revenue: ");
        List<Company> companies = CompanyDao.getCompaniesOrderedByRevenue();
        System.out.println(companies);

        // Get company by id
       // Company company3 = CompanyDao.getCompanyById(1);
        //System.out.println(company3);

        // Get companies
        //CompanyDao.getCompanies().stream().forEach(System.out::println);

        // Update company with id = 1
         //company.setId(1);
         //CompanyDao.updateCompany(company);

        // Delete Company with id 2
       // CompanyDao.deleteCompany(CompanyDao.getCompanyById(5));

        //EmployeeDao.deleteEmployee(EmployeeDao.getEmployeeById(3));
        //ClientDao.deleteClient(ClientDao.getClientById(1));


    }
}
